# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AccountCreateEmailInput {
  email: String!
}

input AccountUpdatePasswordInput {
  currentPassword: String!
  password: String!
  verified: String!
}

input AccountUpdateProfileInput {
  avatarUrl: String
  bio: String
  dob: DateTime
  firstName: String
  lastName: String
  location: String
  phone: String
}

input AdminCreateUserInput {
  email: String!
  firstName: String
  lastName: String
  role: Role!
  username: String
}

input AdminCreateWalletInput {
  name: String!
  network: Network!
  ownerId: String!
  publicKey: String!
}

input AdminListWalletInput {
  limit: Int = 10
  name: String
  skip: Int = 0
}

input AdminUpdateUserInput {
  avatarUrl: String
  bio: String
  firstName: String
  lastName: String
  location: String
  phone: String
  role: Role
  username: String
}

input AdminUpdateWalletInput {
  name: String
}

type AuthToken {
  """JWT Bearer token"""
  token: String!
}

type CorePaging {
  limit: Int
  skip: Int
  total: Int
}

input CorePagingInput {
  limit: Int = 10
  skip: Int = 0
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Email {
  createdAt: DateTime
  email: String
  id: String
  primary: Boolean
  public: Boolean
  updatedAt: DateTime
  verified: Boolean
}

type IntercomMessage {
  payload: JSON
  scope: String
  type: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  accountCreateEmail(input: AccountCreateEmailInput!): Email
  accountDeleteEmail(emailId: String!): Email
  accountMarkEmailPrimary(emailId: String!): Email
  accountMarkEmailPrivate(emailId: String!): Email
  accountMarkEmailPublic(emailId: String!): Email
  accountResetPassword: Boolean
  accountUpdatePassword(input: AccountUpdatePasswordInput!): Boolean
  accountUpdateProfile(input: AccountUpdateProfileInput!): User
  accountUpdateUsername(username: String!): User
  adminCreateUser(input: AdminCreateUserInput!): User
  adminCreateWallet(input: AdminCreateWalletInput!): Wallet
  adminDeleteUser(userId: String!): User
  adminDeleteWallet(walletId: String!): Wallet
  adminSetUserPassword(password: String!, userId: String!): User
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  adminUpdateWallet(input: AdminUpdateWalletInput!, walletId: String!): Wallet
  intercomPub(payload: JSON, scope: String, type: String!): IntercomMessage
  login(input: LoginInput!): AuthToken
  logout: Boolean
  register(input: RegisterInput!): AuthToken
  userCreateWallet(input: UserCreateWalletInput!): Wallet
  userDeleteWallet(walletId: String!): Wallet
  userUpdateWallet(input: UserUpdateWalletInput!, walletId: String!): Wallet
}

enum Network {
  KinMainnet
  KinTestnet
}

type Query {
  accountEmails: [Email!]
  accountProfile: User
  accountUsernameAvailable(username: String!): Boolean
  adminCountUsers(paging: CorePagingInput): CorePaging
  adminCountWallets(input: AdminListWalletInput): CorePaging
  adminUser(userId: String!): User
  adminUsers(paging: CorePagingInput): [User!]
  adminWallet(walletId: String!): Wallet
  adminWallets(input: AdminListWalletInput): [Wallet!]
  me: User
  uptime: Float
  userCountWallets(input: UserListWalletInput): CorePaging
  userWallet(walletId: String!): Wallet
  userWallets(input: UserListWalletInput): [Wallet!]
}

input RegisterInput {
  avatarUrl: String
  email: String!
  firstName: String
  lastName: String
  password: String!
  phone: String
  username: String
}

enum Role {
  Admin
  User
}

type Subscription {
  intercomSub(scope: String, type: String): IntercomMessage
}

type User {
  avatarUrl: String
  bio: String
  createdAt: DateTime
  email: String
  emails: [Email!]
  firstName: String
  id: String
  lastName: String
  location: String
  name: String
  phone: String
  role: Role
  updatedAt: DateTime
  username: String
}

input UserCreateWalletInput {
  name: String!
  network: Network!
  publicKey: String!
}

input UserListWalletInput {
  limit: Int = 10
  name: String
  skip: Int = 0
}

input UserUpdateWalletInput {
  name: String
  publicKey: String
}

type Wallet {
  createdAt: DateTime
  id: String
  name: String
  network: Network
  publicKey: String
  updatedAt: DateTime
}
